library(ggplot2)
ggplot(dataset,aes(x=y_,y=y,color=factor(y)))+geom_point()+geom_jitter()
cutoff=0.3
predicted=as.numeric(dataset$y_>cutoff)
TP=sum(dataset$y==predicted & predicted==1)
FP=sum(dataset$y!=predicted & predicted==1)
TN=sum(dataset$y==predicted & predicted==0)
FN=sum(dataset$y!=predicted & predicted==0)
P=TP+FN
N=TN+FP
Sn=TP/P
Sp=TN/N
Dist=sqrt((1-Sn)**2+(1-Sp)**2)
KS=Sn - (FP/N)
M=(9*FN+0.6*FP)/(1.9*(P+N))
cutoff_data=data.frame(cutoff=99,Dist=99,Accuracy=99, KS=99,M=99)
cutoffs=seq(0,1,length=1000)
for( cutoff in cutoffs){
predicted=as.numeric(dataset$y_>cutoff)
TP=sum(dataset$y==predicted & predicted==1)
FP=sum(dataset$y!=predicted & predicted==1)
TN=sum(dataset$y==predicted & predicted==0)
FN=sum(dataset$y!=predicted & predicted==0)
P=TP+FN
N=TN+FP
Sn=TP/P
Sp=TN/N
Dist=sqrt((1-Sn)**2+(1-Sp)**2)
Accuracy= (TP+TN)/(P+N)
KS=Sn - (FP/N)
M=(9*FN+0.6*FP)/(1.9*(P+N))
cutoff_data=rbind(cutoff_data,c(cutoff,Dist,Accuracy,KS,M))
}
cutoff_data=cutoff_data[-1,]
library(tidyr)
cutoff_data %>%
gather(Metric,Value,Dist:M) %>%
ggplot(aes(x=cutoff,y=Value,color=Metric))+geom_line()
cutoff_dist=cutoff_data$cutoff[which.min(cutoff_data$Dist)][1]
cutoff_Accuracy=cutoff_data$cutoff[which.max(cutoff_data$Accuracy)][1]
cutoff_KS=cutoff_data$cutoff[which.max(cutoff_data$KS)][1]
cutoff_M=cutoff_data$cutoff[which.min(cutoff_data$M)][1]
#test data
table(dtest$job)
dtest=dtest%>%
mutate(job_admin=as.numeric(job=="admin."),
job_blue_collar=as.numeric(job=="blue-collar"),
job_entrepreneur=as.numeric(job=="entrepreneur"),
job_housemaid=as.numeric(job=="housemaid"),
job_management=as.numeric(job=="management"),
job_retired=as.numeric(job=="retired"),
job_self_employed=as.numeric(job=="self-employed"),
job_services=as.numeric(job=="services"),
job_student=as.numeric(job=="student"),
job_technician=as.numeric(job=="technician"),
job_unemployed=as.numeric(job=="unemployed")) %>%
select(-job)
table(dtest$marital)
dtest=dtest%>%
mutate(marital_married=as.numeric(marital=="married"),
marital_single=as.numeric(marital=="single")) %>%
select(-marital)
table(dtest$education)
dtest=dtest%>%
mutate(edu_primary=as.numeric(education=="primary"),
edu_tertiary=as.numeric(education=="tertiary"),
edu_secondary=as.numeric(education=="secondary")) %>%
select(-education)
table(dtest$housing)
dtest=dtest%>%
mutate(housing_=as.numeric(housing=="yes")) %>%
select(-housing)
table(dtest$default)
dtest=dtest%>%
mutate(default_=as.numeric(default=="yes")) %>%
select(-default)
table(dtest$loan)
dtest=dtest%>%
mutate(loan_=as.numeric(loan=="yes")) %>%
select(-loan)
table(dtest$contact)
dtest=dtest%>%
mutate(contact_cellular=as.numeric(contact=="cellular"),
contact_unknown=as.numeric(contact=="unknown")) %>%
select(-contact)
table(dtest$month)
dtest=dtest%>%
mutate(month_apr=as.numeric(month=="apr"),
month_aug=as.numeric(month=="aug"),
month_dec=as.numeric(month=="dec"),
month_feb=as.numeric(month=="feb"),
month_jan=as.numeric(month=="jan"),
month_jul=as.numeric(month=="jul"),
month_mar=as.numeric(month=="mar"),
month_may=as.numeric(month=="may"),
month_nov=as.numeric(month=="nov"),
month_oct=as.numeric(month=="oct")) %>%
select(-month)
table(dtest$poutcome)
dtest=dtest%>%
mutate(pout_failure=as.numeric(poutcome=="failure"),
pout_other=as.numeric(poutcome=="other"),
pout_unknown=as.numeric(poutcome=="unknown")) %>%
select(-poutcome)
dtest$y_=predict(fit,dtest,type="response")
table(dtest$y,as.numeric(dtest$y_>cutoff_dist))
dataset$y_=predict(fit,newdata=dataset,type="response")
library(ROCR)
?prediction
ROCRPred <- prediction(dataset$y_, dataset$y)
ROCRPerf <- performance(ROCRPred, "tpr", "fpr")
plot(ROCRPerf, colorize=TRUE, print.cutoffs.at=seq(.1, by = 0.1))
abline(a=0, b=1)
res <- predict(fit, dataset, type = "response")
PredictedValue <- res>.4
head(PredictedValue)
pv <- as.numeric(PredictedValue)
head(pv)
pv <- as.factor(pv)
daraset$y <- as.factor(daraset$y)
dataset$y <- as.factor(daraset$y)
dataset$y <- as.factor(dataset$y)
library(caret)
confusionMatrix(pv, dataset$y)
install.packages("e1071")
confusionMatrix(pv, dataset$y)
PredictedValue <- res>.5
head(PredictedValue)
pv <- as.numeric(PredictedValue)
head(pv)
pv <- as.factor(pv)
dataset$y <- as.factor(dataset$y)
library(caret)
confusionMatrix(pv, dataset$y)
PredictedValue <- res>.3
head(PredictedValue)
pv <- as.numeric(PredictedValue)
head(pv)
pv <- as.factor(pv)
dataset$y <- as.factor(dataset$y)
library(caret)
confusionMatrix(pv, dataset$y)
PredictedValue <- res>.2
head(PredictedValue)
pv <- as.numeric(PredictedValue)
head(pv)
pv <- as.factor(pv)
dataset$y <- as.factor(dataset$y)
library(caret)
confusionMatrix(pv, dataset$y)
PredictedValue <- res>.1
head(PredictedValue)
pv <- as.numeric(PredictedValue)
head(pv)
pv <- as.factor(pv)
dataset$y <- as.factor(dataset$y)
library(caret)
confusionMatrix(pv, dataset$y)
ggplot(dataset,aes(x=y_,y=y,color=factor(y)))+geom_point()+geom_jitter()
PredictedValue <- res>.05
head(PredictedValue)
pv <- as.numeric(PredictedValue)
head(pv)
pv <- as.factor(pv)
dataset$y <- as.factor(dataset$y)
library(caret)
confusionMatrix(pv, dataset$y)
1
1
1
PredictedValue <- res>.1
head(PredictedValue)
pv <- as.numeric(PredictedValue)
head(pv)
pv <- as.factor(pv)
dataset$y <- as.factor(dataset$y)
library(caret)
confusionMatrix(pv, dataset$y)
setwd("~/Projects/Project HR")
md = read.csv('hr_train.csv',stringsAsFactors = FALSE)
str(md)
View(md)
table(md$left)
library(ROSE)
md = read.csv('hr_train.csv',stringsAsFactors = FALSE)
str(md)
View(md)
table(md$left)
library(ROSE)
# balanced data set with over-sampling
over.md <- ovun.sample(left~., data=md,p=0.5, seed=1,method="over")$data
View(over.md)
table(over.md$left)
str(over.md)
table(over.md$sales)
over.md <- over.md %>%
mutate(Support = as.numeric(sales == "support"),
Technical =  as.numeric(sales == "technical"),
Sales = as.numeric(sales == "sales"),
IT = as.numeric(sales == "IT"),
Mktg = as.numeric(sales == "marketing"),
Prod_Mgt = as.numeric(sales == "product_mng"),
Acct = as.numeric(sales == "accounting"),
RnD = as.numeric(sales == "RandD"),
HR = as.numeric(sales == "hr")) %>%
select(-sales)
over.md=over.md%>%
mutate(Support = as.numeric(sales == "support"),
Technical =  as.numeric(sales == "technical"),
Sales = as.numeric(sales == "sales"),
IT = as.numeric(sales == "IT"),
Mktg = as.numeric(sales == "marketing"),
Prod_Mgt = as.numeric(sales == "product_mng"),
Acct = as.numeric(sales == "accounting"),
RnD = as.numeric(sales == "RandD"),
HR = as.numeric(sales == "hr")) %>%
select(-sales)
library(dplyr)
library(Metrics)
over.md=over.md%>%
mutate(Support = as.numeric(sales == "support"),
Technical =  as.numeric(sales == "technical"),
Sales = as.numeric(sales == "sales"),
IT = as.numeric(sales == "IT"),
Mktg = as.numeric(sales == "marketing"),
Prod_Mgt = as.numeric(sales == "product_mng"),
Acct = as.numeric(sales == "accounting"),
RnD = as.numeric(sales == "RandD"),
HR = as.numeric(sales == "hr")) %>%
select(-sales)
str(over.md)
table(over.md$salary)
over.md <- over.md %>%
mutate(Low_Salary = as.numeric(salary == "low"),
Med_Salary = as.numeric(salary == "medium")) %>%
select(-salary)
str(over.md)
fit <- glm(left~., data = over.md, family = "binomial")
summary(fit)
sort(vif(fit),decreasing = T)[1:3]
library(car)
sort(vif(fit),decreasing = T)[1:3]
fit <- glm(left~., data = over.md, family = "binomial")
sort(vif(fit),decreasing = T)[1:3]
fit <- glm(left~., data = over.md, family = "binomial")
summary(fit)
fit <- glm(left~. -IT, data = over.md, family = "binomial")
summary(fit)
fit <- glm(left~. -IT -RnD, data = over.md, family = "binomial")
summary(fit)
fit <- glm(left~. -IT -RnD -Prod_Mgt, data = over.md, family = "binomial")
summary(fit)
formula(fit)
model <- glm(left ~ satisfaction_level + last_evaluation + number_project +
average_montly_hours + time_spend_company + Work_accident +
promotion_last_5years + Support + Technical + Sales +
Mktg + Acct + HR + Low_Salary + Med_Salary, data = over.md, family = "binomial")
over.md$score=predict(model,newdata=over.md,type = "response")
View(md)
View(over.md)
head(over.md$left)
head(over.md$score)
library(ggplot2)
ggplot(over.md,aes(y=left,x=score,color=factor(left)))+
geom_point()+geom_jitter()
library(ROCR)
ROCRPred <- prediction(over.md$score, over.md$left)
ROCRPerf <- performance(ROCRPred, "tpr", "fpr")
plot(ROCRPerf, colorize=TRUE, print.cutoffs.at=seq(.1, by = 0.1))
abline(a=0, b=1)
# Area under the curve
auc <- performance(ROCRPred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,4)
auc
legend(.5, .3, auc, title = "AUC", cex = .75)
res <- predict(model, over.md, type = "response")
# table(ActualValue=d_test$Type, PredictedValue=res>0.4)
PredictedValue <- res>.5
head(PredictedValue)
pv <- as.numeric(PredictedValue)
head(pv)
pv <- as.factor(pv)
over.md$left <- as.factor(over.md$left)
library(caret)
confusionMatrix(pv, over.md$left)
test.md <- read.csv(file.choose())
str(test.md)
test.data <- test.md %>%
mutate(Support = as.numeric(sales == "support"),
Technical =  as.numeric(sales == "technical"),
Sales = as.numeric(sales == "sales"),
IT = as.numeric(sales == "IT"),
Mktg = as.numeric(sales == "marketing"),
Prod_Mgt = as.numeric(sales == "product_mng"),
Acct = as.numeric(sales == "accounting"),
RnD = as.numeric(sales == "RandD"),
HR = as.numeric(sales == "hr")) %>%
select(-sales)
test.data<- test.md %>%
mutate(Low_Salary = as.numeric(salary == "low"),
Med_Salary = as.numeric(salary == "medium")) %>%
select(-salary)
str(over.md)
res <- predict(model, test.data, type = "response")
res <- predict(model, test.data, type = "response")
?predict
res <- predict(model, newdata=test.data, type = "response")
res <- predict(left ~ satisfaction_level + last_evaluation + number_project +
average_montly_hours + time_spend_company + Work_accident +
promotion_last_5years + Support + Technical + Sales +
Mktg + Acct + HR + Low_Salary + Med_Salary, test.data, type = "response")
res <- predict(model, test.data, type = "response")
library(tree)
str(md)
md$left <- as.factor(md$left)
str(md)
tree.hr=tree(left~.,data=md)
library(dplyr)
md = read.csv('hr_train.csv',stringsAsFactors = FALSE)
str(md)
View(md)
table(md$left)
library(ROSE)
# balanced data set with over-sampling
over.md <- ovun.sample(left~., data=md,p=0.5, seed=1,method="over")$data
table(over.md$left)
#===================================Logistic Regression======================================
# Making Dummy Variables
str(over.md)
table(over.md$sales)
over.md=over.md%>%
mutate(Support = as.numeric(sales == "support"),
Technical =  as.numeric(sales == "technical"),
Sales = as.numeric(sales == "sales"),
IT = as.numeric(sales == "IT"),
Mktg = as.numeric(sales == "marketing"),
Prod_Mgt = as.numeric(sales == "product_mng"),
Acct = as.numeric(sales == "accounting"),
RnD = as.numeric(sales == "RandD"),
HR = as.numeric(sales == "hr")) %>%
select(-sales)
str(over.md)
table(over.md$salary)
over.md <- over.md %>%
mutate(Low_Salary = as.numeric(salary == "low"),
Med_Salary = as.numeric(salary == "medium")) %>%
select(-salary)
str(over.md)
library(car)
sort(vif(fit),decreasing = T)[1:3]
fit <- glm(left~., data = over.md, family = "binomial")
summary(fit)
fit <- glm(left~. -IT, data = over.md, family = "binomial")
summary(fit)
fit <- glm(left~. -IT -RnD, data = over.md, family = "binomial")
summary(fit)
fit <- glm(left~. -IT -RnD -Prod_Mgt, data = over.md, family = "binomial")
summary(fit)
formula(fit)
model <- glm(left ~ satisfaction_level + last_evaluation + number_project +
average_montly_hours + time_spend_company + Work_accident +
promotion_last_5years + Support + Technical + Sales +
Mktg + Acct + HR + Low_Salary + Med_Salary, data = over.md, family = "binomial")
over.md$score=predict(model,newdata=over.md,type = "response")
head(over.md$left)
head(over.md$score)
library(ggplot2)
ggplot(over.md,aes(y=left,x=score,color=factor(left)))+
geom_point()+geom_jitter()
library(ROCR)
ROCRPred <- prediction(over.md$score, over.md$left)
ROCRPerf <- performance(ROCRPred, "tpr", "fpr")
plot(ROCRPerf, colorize=TRUE, print.cutoffs.at=seq(.1, by = 0.1))
abline(a=0, b=1)
# Area under the curve
auc <- performance(ROCRPred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,4)
auc
legend(.5, .3, auc, title = "AUC", cex = .75)
res <- predict(model, over.md, type = "response")
# table(ActualValue=d_test$Type, PredictedValue=res>0.4)
PredictedValue <- res>.5
head(PredictedValue)
pv <- as.numeric(PredictedValue)
head(pv)
pv <- as.factor(pv)
over.md$left <- as.factor(over.md$left)
library(caret)
confusionMatrix(pv, over.md$left)
test.md <- read.csv(file.choose())
str(test.md)
test.data <- test.md %>%
mutate(Support = as.numeric(sales == "support"),
Technical =  as.numeric(sales == "technical"),
Sales = as.numeric(sales == "sales"),
IT = as.numeric(sales == "IT"),
Mktg = as.numeric(sales == "marketing"),
Prod_Mgt = as.numeric(sales == "product_mng"),
Acct = as.numeric(sales == "accounting"),
RnD = as.numeric(sales == "RandD"),
HR = as.numeric(sales == "hr")) %>%
select(-sales)
test.data<- test.md %>%
mutate(Low_Salary = as.numeric(salary == "low"),
Med_Salary = as.numeric(salary == "medium")) %>%
select(-salary)
str(over.md)
res <- predict(model, test.data, type = "response")
View(model)
sort(vif(fit),decreasing = T)[1:3]
model <- lm(left ~ satisfaction_level + last_evaluation + number_project +
average_montly_hours + time_spend_company + Work_accident +
promotion_last_5years + Support + Technical + Sales +
Mktg + Acct + HR + Low_Salary + Med_Salary, data = over.md, family = "binomial")
model <- lm(left ~ satisfaction_level + last_evaluation + number_project +
average_montly_hours + time_spend_company + Work_accident +
promotion_last_5years + Support + Technical + Sales +
Mktg + Acct + HR + Low_Salary + Med_Salary, data = over.md)
library(dplyr)
md = read.csv('hr_train.csv',stringsAsFactors = FALSE)
str(md)
View(md)
table(md$left)
library(ROSE)
# balanced data set with over-sampling
over.md <- ovun.sample(left~., data=md,p=0.5, seed=1,method="over")$data
table(over.md$left)
library(tree)
str(md)
md$left <- as.factor(md$left)
str(md)
tree.hr=tree(left~.,data=md)
sum(is.na(md))
plot(tree.hr)
text(tree.hr,pretty=0)
tree.pred=predict(tree.hr,newdata=md,type="class")
summary(tree.hr)
table(tree.pred, md$left)
library(randomForest)
class_hr=randomForest(left~.,data=md)
library(dplyr)
md = read.csv('hr_train.csv',stringsAsFactors = FALSE)
str(md)
View(md)
table(md$left)
library(ROSE)
# balanced data set with over-sampling
over.md <- ovun.sample(left~., data=md,p=0.5, seed=1,method="over")$data
table(over.md$left)
library(randomForest)
class_hr=randomForest(left~.,data=md)
class_hr
class_hr=randomForest(x=left~.,y=md)
class_hr=randomForest(left~.,data=md,na.action=na.fail)
View(md)
class_hr=randomForest(left~.,data=md)
library(dplyr)
md = read.csv('hr_train.csv',stringsAsFactors = FALSE)
table(md$left)
library(randomForest)
class_hr=randomForest(left~.,data=md)
class_hr
sum(is.na(md))
as.numeric(md)
class_hr=randomForest(left~.-sales-salary,data=md)
class_hr
# balanced data set with over-sampling
over.md <- ovun.sample(left~., data=md,p=0.5, seed=1,method="over")$data
over.md=over.md%>%
mutate(Support = as.numeric(sales == "support"),
Technical =  as.numeric(sales == "technical"),
Sales = as.numeric(sales == "sales"),
IT = as.numeric(sales == "IT"),
Mktg = as.numeric(sales == "marketing"),
Prod_Mgt = as.numeric(sales == "product_mng"),
Acct = as.numeric(sales == "accounting"),
RnD = as.numeric(sales == "RandD"),
HR = as.numeric(sales == "hr")) %>%
select(-sales)
over.md <- over.md %>%
mutate(Low_Salary = as.numeric(salary == "low"),
Med_Salary = as.numeric(salary == "medium")) %>%
select(-salary)
class_hr=randomForest(left~.,data=md)
class_hr=randomForest(left~.,data=over.md)
test.md <- read.csv(file.choose())
test.data <- test.md %>%
mutate(Support = as.numeric(sales == "support"),
Technical =  as.numeric(sales == "technical"),
Sales = as.numeric(sales == "sales"),
IT = as.numeric(sales == "IT"),
Mktg = as.numeric(sales == "marketing"),
Prod_Mgt = as.numeric(sales == "product_mng"),
Acct = as.numeric(sales == "accounting"),
RnD = as.numeric(sales == "RandD"),
HR = as.numeric(sales == "hr")) %>%
select(-sales)
test.data<- test.md %>%
mutate(Low_Salary = as.numeric(salary == "low"),
Med_Salary = as.numeric(salary == "medium")) %>%
select(-salary)
## ------------------------------------------------------------------------
forest.pred=predict(class_hr,newdata=test.md)
plot(class_hr)
class_hr
## ------------------------------------------------------------------------
forest.pred=predict(class_hr,newdata=test.md)
## ------------------------------------------------------------------------
forest.pred=predict(class_hr,newdata=test.md,type = 'class')
class_hr=randomForest(.,data=over.md)
